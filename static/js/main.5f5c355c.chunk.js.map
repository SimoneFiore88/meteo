{"version":3,"sources":["components/Loader/Loader.js","components/Chart.js","components/Main/Main.js","App.js","reportWebVitals.js","index.js","components/Main/Main.module.css"],"names":["Loader","className","Chart","props","next","data","daily","map","el","name","Intl","DateTimeFormat","dateStyle","format","Date","dt","max","temp","min","console","log","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","tick","fill","YAxis","domain","Tooltip","Line","type","stroke","Main","classes","cover","card","current","feels_like","weather","description","toUpperCase","humidity","pressure","getTime","sunrise","sunset","style","getHours","getMinutes","App","useState","setData","useEffect","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","fetch","then","response","json","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5f5c355c.chunk.js","sourcesContent":["export default function Loader() {\n  return (\n    <div className={\"container-fluid px-md-5 min-vh-100 bg-danger \"}>\n      <div className=\"row min-vh-100 align-items-center justify-content-center bg-danger\">\n        <div className=\"col-12 \"></div>\n      </div>\n    </div>\n  );\n}\n","import {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nexport default function Chart(props) {\n  const next = props.data.daily.map((el) => {\n    return {\n      name: new Intl.DateTimeFormat(\"en\", {\n        dateStyle: \"short\",\n      }).format(new Date(el.dt * 1000)),\n      max: el.temp.max,\n      min: el.temp.min,\n    };\n  });\n\n  console.log(props.data);\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart width={100} height={300} data={next}>\n        <XAxis dataKey=\"name\" tick={{ fill: \"white\" }} />\n        <YAxis tick={{ fill: \"white\" }} domain={[20, 30]} />\n        <Tooltip />\n        {/* <Legend /> */}\n        <Line type=\"monotone\" dataKey=\"max\" stroke=\"#000000\" />\n        <Line type=\"monotone\" dataKey=\"min\" stroke=\"#000000\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","import Chart from \"../Chart\";\nimport classes from \"./Main.module.css\";\n\nexport default function Main(props) {\n  return (\n    <div\n      className={\"container-fluid px-md-5 min-vh-100  \" + classes[props.cover]}\n    >\n      <div className=\"row min-vh-100 align-items-center justify-content-center\">\n        <div className=\"col-12 col-md-6 px-5\">\n          <div className={classes.card}>\n            <p className=\"text-center display-3\">\n              {props.data.current.temp} °C\n            </p>\n            <p className=\"text-center lead\">\n              Feels like {props.data.current.feels_like} °C\n            </p>\n            <p className=\"text-center h3\">\n              {props.data.current.weather[0].description.toUpperCase()}\n            </p>\n            <p>Humidity {props.data.current.humidity} %</p>\n            <p>Pressure {props.data.current.pressure} mbar</p>\n            <p>\n              Sunrise {getTime(new Date(props.data.current.sunrise * 1000))}\n            </p>\n            <p>Sunset {getTime(new Date(props.data.current.sunset * 1000))}</p>\n          </div>\n        </div>\n        <div\n          className={\"col-12 col-md-6 px-5\" + classes.card}\n          style={{ height: \"400px\" }}\n        >\n          <Chart data={props.data} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getTime(data) {\n  let hours = data.getHours() < 10 ? \"0\" + data.getHours() : data.getHours();\n  let minutes =\n    data.getMinutes() < 10 ? \"0\" + data.getMinutes() : data.getMinutes();\n\n  return hours + \":\" + minutes;\n}\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Loader from \"./components/Loader/Loader\";\nimport Main from \"./components/Main/Main\";\n\nfunction App() {\n  const [data, setData] = useState();\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=a44dbe17d9702693257f7556d12dec32`,\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setData(data);\n        });\n    });\n  }, []);\n\n  return data ? (\n    <Main data={data} cover={data.current.weather[0].main} />\n  ) : (\n    <Loader />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Clear\":\"Main_Clear__c_SFW\",\"card\":\"Main_card__aae9f\"};"],"sourceRoot":""}