{"version":3,"sources":["components/Main/Main.module.css","components/Loader/Loader.js","components/Chart.js","components/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Loader","className","Chart","props","chart","useRef","useLayoutEffect","x","am4core","am4charts","data","categoryAxis","xAxes","push","renderer","grid","template","location","dataFields","category","labels","fontSize","valueAxis","yAxes","tooltip","disabled","minWidth","min","Math","map","el","value","series","categoryX","valueY","tooltipText","name","cursor","legend","current","dispose","id","style","width","height","am4themes_animated","Main","hourly","date","Intl","DateTimeFormat","timeStyle","dateStyle","format","Date","dt","temp","console","log","classes","cover","feels_like","weather","description","toUpperCase","humidity","pressure","getTime","sunrise","sunset","getHours","getMinutes","App","useState","setData","useEffect","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","fetch","then","response","json","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,MAAQ,sB,8JCDX,SAASC,IACtB,OACE,qBAAKC,UAAW,sCAAhB,SACE,qBAAKA,UAAU,4DAAf,SACE,qBAAKA,UAAU,gB,uCCGR,SAASC,EAAMC,GAC5B,IAAMC,EAAQC,iBAAO,MAiCrB,OA/BAC,2BAAgB,WACd,IAAIC,EAAIC,IAAe,WAAYC,KAEnCF,EAAEG,KAAOP,EAAMO,KAEf,IAAIC,EAAeJ,EAAEK,MAAMC,KAAK,IAAIJ,KACpCE,EAAaG,SAASC,KAAKC,SAASC,SAAW,EAC/CN,EAAaO,WAAWC,SAAW,OACnCR,EAAaG,SAASM,OAAOJ,SAASK,SAAW,GAEjD,IAAIC,EAAYf,EAAEgB,MAAMV,KAAK,IAAIJ,KACjCa,EAAUE,QAAQC,UAAW,EAC7BH,EAAUR,SAASY,SAAW,GAC9BJ,EAAUK,IAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQzB,EAAMO,KAAKmB,KAAI,SAACC,GAAD,OAAQA,EAAGC,WACtDT,EAAUR,SAASM,OAAOJ,SAASK,SAAW,GAE9C,IAAIW,EAASzB,EAAEyB,OAAOnB,KAAK,IAAIJ,KAU/B,OATAuB,EAAOd,WAAWe,UAAY,OAC9BD,EAAOd,WAAWgB,OAAS,QAC3BF,EAAOG,YAAc,uBACrBH,EAAOI,KAAO,cACd7B,EAAE8B,OAAS,IAAI5B,IAEfF,EAAE+B,OAAS,IAAI7B,IACfL,EAAMmC,QAAUhC,EAET,WACLA,EAAEiC,aAEH,IAEI,qBAAKC,GAAG,WAAWC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WApC5DpC,IAAiBqC,K,sBCFF,SAASC,EAAK3C,GAC3B,IAAMO,EAAOP,EAAMO,KAAKqC,OAAOlB,KAAI,SAACC,GAClC,MAAO,CACLkB,KAAM,IAAIC,KAAKC,eAAe,QAAS,CACrCC,UAAW,QACXC,UAAW,UACVC,OAAO,IAAIC,KAAa,IAARxB,EAAGyB,KACtBxB,MAAOD,EAAG0B,SAKd,OADAC,QAAQC,IAAIhD,GAEV,qBACET,UAAW,uCAAyC0D,IAAQxD,EAAMyD,OADpE,SAGE,sBAAK3D,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,oBAAGA,UAAU,wBAAb,UACGE,EAAMO,KAAK6B,QAAQiB,KADtB,YAGA,oBAAGvD,UAAU,mBAAb,wBACcE,EAAMO,KAAK6B,QAAQsB,WADjC,YAGA,mBAAG5D,UAAU,iBAAb,SACGE,EAAMO,KAAK6B,QAAQuB,QAAQ,GAAGC,YAAYC,gBAE7C,0CAAa7D,EAAMO,KAAK6B,QAAQ0B,SAAhC,QACA,0CAAa9D,EAAMO,KAAK6B,QAAQ2B,SAAhC,WACA,yCACWC,EAAQ,IAAIb,KAAkC,IAA7BnD,EAAMO,KAAK6B,QAAQ6B,aAE/C,wCAAWD,EAAQ,IAAIb,KAAiC,IAA5BnD,EAAMO,KAAK6B,QAAQ8B,iBAGnD,qBAAKpE,UAAU,SAASyC,MAAO,CAAEE,OAAQ,SAAzC,SACE,qBAAK3C,UAAU,kBAAf,SACE,cAACC,EAAD,CAAOQ,KAAMA,aAQzB,SAASyD,EAAQzD,GAKf,OAJYA,EAAK4D,WAAa,GAAK,IAAM5D,EAAK4D,WAAa5D,EAAK4D,YAIjD,KAFb5D,EAAK6D,aAAe,GAAK,IAAM7D,EAAK6D,aAAe7D,EAAK6D,cCvB7CC,MAxBf,WACE,MAAwBC,qBAAxB,mBAAO/D,EAAP,KAAagE,EAAb,KAgBA,OAfAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAMC,EAAMD,EAASE,OAAOC,SACtBC,EAAMJ,EAASE,OAAOG,UAE5BC,MAAM,uDAAD,OACoDL,EADpD,gBAC+DG,EAD/D,yDAGFG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC5E,GACLgE,EAAQhE,WAGb,IAEIA,EACL,cAACoC,EAAD,CAAMpC,KAAMA,EAAMkD,MAAOlD,EAAK6B,QAAQuB,QAAQ,GAAG2B,OAEjD,cAACzF,EAAD,KCbW0F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.314a0d99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Clear\":\"Main_Clear__c_SFW\"};","export default function Loader() {\n  return (\n    <div className={\"container-fluid px-md-5 min-vh-100 \"}>\n      <div className=\"row min-vh-100 align-items-center justify-content-center \">\n        <div className=\"col-12 \"></div>\n      </div>\n    </div>\n  );\n}\n","import React, { useRef, useLayoutEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nexport default function Chart(props) {\n  const chart = useRef(null);\n\n  useLayoutEffect(() => {\n    let x = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n    x.data = props.data;\n\n    let categoryAxis = x.xAxes.push(new am4charts.CategoryAxis());\n    categoryAxis.renderer.grid.template.location = 0;\n    categoryAxis.dataFields.category = \"date\";\n    categoryAxis.renderer.labels.template.fontSize = 10;\n\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    valueAxis.min = Math.min(...props.data.map((el) => el.value));\n    valueAxis.renderer.labels.template.fontSize = 10;\n\n    let series = x.series.push(new am4charts.LineSeries());\n    series.dataFields.categoryX = \"date\";\n    series.dataFields.valueY = \"value\";\n    series.tooltipText = \"{valueY.value} °C\";\n    series.name = \"Temperature\";\n    x.cursor = new am4charts.XYCursor();\n\n    x.legend = new am4charts.Legend();\n    chart.current = x;\n\n    return () => {\n      x.dispose();\n    };\n  }, []);\n\n  return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>;\n}\n","import Chart from \"../Chart\";\nimport classes from \"./Main.module.css\";\n\nexport default function Main(props) {\n  const data = props.data.hourly.map((el) => {\n    return {\n      date: new Intl.DateTimeFormat(\"it-IT\", {\n        timeStyle: \"short\",\n        dateStyle: \"short\",\n      }).format(new Date(el.dt * 1000)),\n      value: el.temp,\n    };\n  });\n\n  console.log(data);\n  return (\n    <div\n      className={\"container-fluid px-md-5 min-vh-100  \" + classes[props.cover]}\n    >\n      <div className=\"row \">\n        <div className=\"col-12 my-3\">\n          <div className=\"card p-3 shadow\">\n            <p className=\"text-center display-3\">\n              {props.data.current.temp} °C\n            </p>\n            <p className=\"text-center lead\">\n              Feels like {props.data.current.feels_like} °C\n            </p>\n            <p className=\"text-center h3\">\n              {props.data.current.weather[0].description.toUpperCase()}\n            </p>\n            <p>Humidity {props.data.current.humidity} %</p>\n            <p>Pressure {props.data.current.pressure} mbar</p>\n            <p>\n              Sunrise {getTime(new Date(props.data.current.sunrise * 1000))}\n            </p>\n            <p>Sunset {getTime(new Date(props.data.current.sunset * 1000))}</p>\n          </div>\n        </div>\n        <div className=\"col-12\" style={{ height: \"400px\" }}>\n          <div className=\"card p-3 shadow\">\n            <Chart data={data} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getTime(data) {\n  let hours = data.getHours() < 10 ? \"0\" + data.getHours() : data.getHours();\n  let minutes =\n    data.getMinutes() < 10 ? \"0\" + data.getMinutes() : data.getMinutes();\n\n  return hours + \":\" + minutes;\n}\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Loader from \"./components/Loader/Loader\";\nimport Main from \"./components/Main/Main\";\n\nfunction App() {\n  const [data, setData] = useState();\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&appid=a44dbe17d9702693257f7556d12dec32`,\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setData(data);\n        });\n    });\n  }, []);\n\n  return data ? (\n    <Main data={data} cover={data.current.weather[0].main} />\n  ) : (\n    <Loader />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}